def markdown_to_blocks(markdown: str) -> list:
    blocks = markdown.split("\n\n")
    filtered_blocks = []
    for block in blocks:
        if block == "":
            continue
        block = block.strip()
        filtered_blocks.append(block)
    return filtered_blocks

# Auxiliary function to count heading hashes in block_to_block_type function
def count_hash(markdown_block: str) -> bool:
    for num_hash in range(6):
        start_chars = "#" * (num_hash + 1) + " "
        # We cut the \n char"
        if markdown_block[1:].startswith(start_chars):
            return True
    return False

# Auxiliary function for the block_to_block_type function
def count_char_by_line(markdown_block: str, char: str, extra_char = None) -> bool:
    split_by_char = markdown_block[1:-1].split("\n")
    for line in split_by_char:
        if extra_char:
            if not (line.startswith(char) or line.startswith(extra_char)):
                return False
        else: 
            if not line.startswith(char):
                return False
    return True

# Auxiliary function to check if the format for an ordered list is respected in block_to_block_type function
def items_in_ordered_list(markdown_block: str) -> bool:
    split_block = markdown_block[1:-1].split("\n")
    num_index = 1
    for line in split_block:
        if not line.startswith(f"{num_index}. "):
            return False
        num_index += 1
    return True

# Assuming perfect markdown generated by the previous function
def block_to_block_type(markdown_block: str) -> str:
    # Heading
    if markdown_block[1] == "#":
        if count_hash(markdown_block):
            return "heading"
    elif markdown_block[1:].startswith("```") and markdown_block[:-1].endswith("```"):
        return "code"
    elif markdown_block[1] == ">":
        if count_char_by_line(markdown_block, ">"):
            return "quote"
    elif markdown_block[1:3] == "* " or markdown_block[1:3] == "- ":
        if count_char_by_line(markdown_block, "* ", "- "):
            return "unordered_list"
    elif markdown_block[1:].startswith("1. "):
        if items_in_ordered_list(markdown_block):
            return "ordered_list"

    return "paragraph"

